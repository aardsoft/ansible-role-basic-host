#jinja2: lstrip_blocks: True
# {{ ansible_managed }}
# See: https://www.freedesktop.org/software/systemd/man/systemd.network.html
#
# Currently only some basics for static addresses, dhcp and vlan are
# implemented. Some options are present but disabled to make adding
# additional functionality once needed easier. Do not manually edit
# the ansible created files.

[Match]
{% if item.value.match is undefined %}
 {% if item.value.type is undefined or item.value.type is defined and item.value.type != "veth" %}
Name={{item.key}}
 {% endif %}
 {% if item.value.hwaddr is defined and item.value.type is defined and item.value.type == "veth" %}
MACAddress={{ item.value.hwaddr }}
 {% endif %}
{% else %}
 {% if item.value.match.name is defined %}
Name={{item.value.match.name}}
 {% endif %}
 {% if item.value.match.path is defined %}
Path={{item.value.match.path}}
 {% endif %}
 {% if item.value.match.driver is defined %}
Driver={{item.value.match.driver}}
 {% endif %}
 {% if item.value.match.type is defined %}
Type={{item.value.match.type}}
 {% endif %}
 {% if item.value.match.host is defined %}
Host={{item.value.match.host}}
 {% endif %}
 {% if item.value.match.virtualization is defined %}
Virtualization={{item.value.match.virtualization}}
 {% endif %}
 {% if item.value.match.architecture is defined %}
Virtualization={{item.value.match.architecture}}
 {% endif %}
 {% if item.value.match.mac_address is defined %}
MACAddress={{item.value.match.mac_address}}
 {% endif %}
{% endif %}

[Link]
{# for now only force MAC addresses on bridges #}
{% if item.value.hwaddr is defined and item.value.type is defined and item.value.type == "bridge" %}
MACAddress={{ item.value.hwaddr }}
{% endif %}
{% if item.value.mtu is defined %}
MTUBytes={{ item.value.mtu }}
{% endif %}
#ARP=
# default: no, set it explicitely
 {% if ansible_distribution != "CentOS" %}
Unmanaged={{ item.value.unmanaged | default('no')}}
 {% endif %}

[Network]
#Description=
{% if item.value.static is defined and item.value.static == True %}
{# TODO: check if it's a dict. in that case, add multiple address #}
{#       sections instead                                         #}
{# TODO: add prefixes #}
  {% if item.value.ipv4 is defined %}
Address={{ item.value.ipv4 }}
  {% endif %}
  {% if item.value.gateway is defined %}
Gateway={{ item.value.gateway }}
  {% endif %}
{% elif item.value.static is defined and item.value.static == False %}
DHCP=yes
{# if ipv4 and hwaddr is defined, but static is not assume that the address #}
{# is configured in the DHCP server as static binding                       #}
{% elif item.value.ipv4 is defined and item.value.hwaddr is defined %}
DHCP=yes
{# check if dhcp is explicitely configured #}
{% elif item.value.dhcp is defined %}
DHCP={{ item.value.dhcp }}
{# default to not checking DHCP #}
{% else %}
DHCP=no
{% endif %}

IPForward={{ item.value.forwarding|default("no") }}
IPMasquerade={{ item.value.masquerade|default("no") }}

#BindCarrier=
#IPv6PrivacyExtensions=
#IPv6AcceptRA=
#IPv6HopLimit=
{% if item.value.bridge is defined %}
Bridge={{item.value.bridge}}
{% endif %}
{% if item.value.bond is defined %}
Bond={{item.value.bond}}
{% endif %}
#VRF=
#TODO: look up vlans by name
{% if item.value.vlans is defined %}
  {% for vlan in item.value.vlans %}
VLAN=vl.{{vlan}}
  {% endfor %}
{% endif %}
{% if item.value.macvlans is defined %}
  {% for macvlan in item.value.macvlans %}
MACVLAN={{macvlan}}
  {% endfor %}
{% endif %}
{% if item.value.vxlans is defined %}
  {% for vxlan in item.value.vxlans %}
VXLAN={{vxlan}}
  {% endfor %}
{% endif %}
{% if item.value.tunnels is defined %}
  {% for tunnel in item.value.tunnels %}
Tunnel={{tunnel}}
  {% endfor %}
{% endif %}

{% if item.value.routes is defined %}
  {% for route in item.value.routes %}
[Route]
      {% if item.value.routes[route].gateway is defined %}
Gateway={{ item.value.routes[route].gateway }}
      {% endif %}
      {% if item.value.routes[route].destination is defined %}
Destination={{ item.value.routes[route].destination }}
      {% endif %}
      {% if item.value.routes[route].source is defined %}
Source={{ item.value.routes[route].source }}
      {% endif %}
      {% if item.value.routes[route].metric is defined %}
Metric={{ item.value.routes[route].metric }}
      {% endif %}
Scope={{ item.value.routes[route].scope | default('global') }}
      {% if item.value.routes[route].preferredsource is defined %}
PreferredSource={{ item.value.routes[route].preferredsource }}
      {% endif %}
      {% if item.value.routes[route].table is defined %}
Table={{ item.value.routes[route].table }}
      {% endif %}
  {% endfor %}
{% endif %}

{# PolicyRules are available from systemd 235 onwards #}
{% if item.value.policyrules is defined %}
  {% for rule in item.value.policyrules %}
[RoutingPolicyRule]
    {% if item.value.policyrules[rule].typeofservice is defined %}
TypeOfService={{ item.value.policyrules[rule].typeofservice }}
    {% endif %}
    {% if item.value.policyrules[rule].from is defined %}
From={{ item.value.policyrules[rule].from }}
    {% endif %}
    {% if item.value.policyrules[rule].to is defined %}
To={{ item.value.policyrules[rule].to }}
    {% endif %}
    {% if item.value.policyrules[rule].firewallmark is defined %}
FirewallMark={{ item.value.policyrules[rule].firewallmark }}
    {% endif %}
    {% if item.value.policyrules[rule].table is defined %}
Table={{ item.value.policyrules[rule].table }}
    {% endif %}
    {% if item.value.policyrules[rule].priority is defined %}
Priority={{ item.value.policyrules[rule].priority }}
    {% endif %}
    {% if item.value.policyrules[rule].incominginterface is defined %}
IncomingInterface={{ item.value.policyrules[rule].incominginterface }}
    {% endif %}
    {% if item.value.policyrules[rule].outgoinginterface is defined %}
OutgoingInterface={{ item.value.policyrules[rule].outgoinginterface }}
    {% endif %}

  {% endfor %}
{% endif %}


{% if item.value.extra_ipv4 is defined %}
 {% for ip in item.value.extra_ipv4 %}
[Address]
Address={{ip}}
 {% endfor %}
{% endif %}

{# FIXME #}
{% if item.value.addresses is defined %}
  {% for address in item.value.addresses %}
[Address]
Address={{address}}
    {% if item.value.addresses[address].peer is defined %}
Peer={{item.value.addresses[address].peer}}
    {% endif %}
    {% if item.value.addresses[address].broadcast is defined %}
Broadcast={{item.value.addresses[address].broadcast}}
    {% endif %}
    {% if item.value.addresses[address].label is defined %}
Label={{item.value.addresses[address].label}}
    {% endif %}
    {% if item.value.addresses[address].preferred_lifetime is defined %}
PreferredLifetime={{item.value.addresses[address].preferred_lifetime}}
    {% endif %}
    {% if item.value.addresses[address].home_address is defined %}
HomeAddress={{item.value.addresses[address].home_address}}
    {% endif %}
    {% if item.value.addresses[address].duplicate_address_detection is defined %}
DuplicateAddressDetection={{item.value.addresses[address].duplicate_address_detection}}
    {% endif %}
    {% if item.value.addresses[address].manage_temporary_address is defined %}
ManageTemporaryAddress={{item.value.addresses[address].manage_temporary_address}}
    {% endif %}
    {% if item.value.addresses[address].prefix_route is defined %}
PrefixRoute={{item.value.addresses[address].prefix_route}}
    {% endif %}
    {% if item.value.addresses[address].auto_join is defined %}
AutoJoin={{item.value.addresses[address].auto_join}}
    {% endif %}

    {% if item.value.addresses[address].gateway is defined %}
[Route]
Gateway={{item.value.addresses[address].gateway}}
    {# TODO: add the remaining route section options as well - probably most #}
    {#       sensible way would be by making route section an include, and   #}
    {#       re-using it                                                     #}
    {% endif %}
  {% endfor %}
{% endif %}

#[IPv6AddressLabel]
#Label=
#Prefix=

- name: create local groups (known gid)
  group:
    gid: "{{item.value.gid}}"
    name: "{{item.key}}"
    state: "{{item.value.state|default('present')}}"
  with_dict: "{{local_groups}}"
  when: local_groups is defined and item.value.gid is defined

- name: create local groups (unknown gid)
  group:
    system: "{{item.value.system|default(true)}}"
    name: "{{item.key}}"
    state: "{{item.value.state|default('present')}}"
  with_dict: "{{local_groups}}"
  when: local_groups is defined and item.value.gid is undefined

# groups are optional, but if not specified, all non-default groups
# will be cleaned
# flags which might make sense to add: seuser remove
- name: create local users (known uid)
  user:
    name: "{{item.key}}"
    uid: "{{item.value.uid}}"
    comment: "{{item.value.comment|default('Created by ansible')}}"
    group: "{{item.value.group|default(item.key)}}"
    groups: "{{item.value.groups|default('')}}"
    home: "{{item.value.home|default('/home/'+item.key)}}"
    move_home: "{{item.value.move_home|default('no')}}"
    system: "{{item.value.system|default(false)}}"
    password_lock: "{{item.value.password_lock|default('no')}}"
    state: "{{item.value.state|default('present')}}"
    shell: "{{item.value.shell|default('/bin/bash')}}"
  with_dict: "{{local_users}}"
  when: local_users is defined and item.value.uid is defined

- name: create local users (unknown uid)
  user:
    name: "{{item.key}}"
    uid: "{{item.value.uid}}"
    comment: "{{item.value.comment|default('Created by ansible')}}"
    group: "{{item.value.group|default(item.key)}}"
    groups: "{{item.value.groups|default('')}}"
    home: "{{item.value.home|default('/home/'+item.key)}}"
    move_home: "{{item.value.move_home|default('no')}}"
    system: "{{item.value.system|default(true)}}"
    password_lock: "{{item.value.password_lock|default('no')}}"
    state: "{{item.value.state|default('present')}}"
    shell: "{{item.value.shell|default('/bin/bash')}}"
  with_dict: "{{local_users}}"
  when: local_users is defined and item.value.uid is undefined

- name: create .ssh for local users
  file:
    path: "{{item.value.home|default('/home/'+item.key)}}/.ssh"
    owner: "{{item.key}}"
    group: "{{item.value.group|default(item.key)}}"
    mode: 0700
    state: directory
  with_dict: "{{local_users}}"
  when: local_users is defined

- name: copy authorized keys for local users
  template:
    src: authorized_key_template.j2
    dest: "{{item.value.home|default('/home/'+item.key)}}/.ssh/authorized_keys"
    owner: "{{item.key}}"
    group: "{{item.value.group|default(item.key)}}"
    mode: 0600
  with_dict: "{{local_users}}"
  when: local_users is defined and item.value.key_files is defined

- name: copy sudors configuration for local users
  template:
    src: sudoers_template.j2
    dest: "/etc/sudoers.d/{{item.key}}"
    owner: root
    mode: 0440
  with_dict: "{{local_users}}"
  when: local_users is defined and item.value.sudoers is defined

# needs to be after user generation
- name: add linger users
  command: loginctl enable-linger "{{item}}"
  changed_when: false
  when: logind_linger_users is defined
  with_items: "{{logind_linger_users}}"
- include_role:
    name: data-utilities
    tasks_from: check_versions
  vars:
    data_utilities_minver: 0.4
  tags:
    - base_config
    - access_setup

- debug:
    msg:
      - "Machine architecture: {{ansible_machine|default('unknown')}}"
      - "OS architecture: {{ansible_architecture|default('unknown')}}"
      - "OS family: {{ansible_os_family|default('unknown')}}"
      - "OS distribution: {{ansible_os_distribution|default('unknown')}} in {{ansible_distribution_version|default('unknown')}}"

# Keep this disabled until we're either using ansible-data-utilities everywhere,
# or we find a way to properly catch errors here
#- block:
#    - name: trying to load additional filters
#      include_role:
#        name: ansible-data-utilities
#        tasks_from: test_filters
#  ignore_errors: yes

# Those two items are a workaround for ansible shortcomings when it comes to
# variable inclusion. Note that it'll override host specific variables, so should
# be used with care.
- name: include additional host variables
  include_vars: "../host_vars/{{item}}.yml"
  with_items: "{{basic_host_extra_host_vars}}"
  when: basic_host_extra_host_vars is defined

- name: include additional group variables
  include_vars: "../group_vars/{{item}}.yml"
  with_items: "{{basic_host_extra_group_vars}}"
  when: basic_host_extra_group_vars is defined

- name: merge local network nodes into global one
  set_fact:
    network_nodes: "{{ {} | combine(network_nodes, local_network_nodes, recursive=True) }}"
  when: local_network_nodes is defined

- name: merge local vlan definitions into global one
  set_fact:
    vlans: "{{ {} | combine(vlans, local_vlans, recursive=True) }}"
  when: local_vlans is defined

- name: merge local dhcp networks into global one
  set_fact:
    dhcp_networks: "{{ {} | combine(dhcp_networks, local_dhcp_networks, recursive=True) }}"
  when: local_dhcp_networks is defined

- include_role:
    name: data-utilities
    tasks_from: setup_passdb
  tags:
    - base_config
    - access_setup

- include_tasks: default_vars.yml
  tags:
    - base_config
    - access_setup

# adm_passdb is a bit more generic than root_passdb, so prepare compat bindings
# for moving to that eventually
- set_fact:
    adm_passdb_entry: "{{root_passdb_entry}}"
  when: >
    adm_passdb_entry is undefined and
    root_passdb_entry is defined

- name: include main tasks for non-Windows
  include_tasks: main_default.yml
  tags:
    - base_config
    - access_setup
  when: ansible_os_family != "Windows"

- name: include main tasks for windows
  include_tasks: main_windows.yml
  tags:
    - base_config
    - access_setup
  when: ansible_os_family == "Windows"

- name: include additional tasks
  include_tasks: "tasks/{{item}}.yml"
  with_items: "{{basic_host_extra_tasks}}"
  when: basic_host_extra_tasks is defined
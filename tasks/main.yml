- name: verify ansible version
  assert:
    that: "ansible_version.full is version_compare('2.8', '>=')"
    msg: >
      "Minimum ansible version required for running this is 2.8"
  tags:
    - base_config
    - access_setup

# Keep this disabled until we're either using ansible-data-utilities everywhere,
# or we find a way to properly catch errors here
#- block:
#    - name: trying to load additional filters
#      include_role:
#        name: ansible-data-utilities
#        tasks_from: test_filters
#  ignore_errors: yes

# Those two items are a workaround for ansible shortcomings when it comes to
# variable inclusion. Note that it'll override host specific variables, so should
# be used with care.
- name: include additional host variables
  include_vars: "../host_vars/{{item}}.yml"
  with_items: "{{basic_host_extra_host_vars}}"
  when: basic_host_extra_host_vars is defined

- name: include additional group variables
  include_vars: "../group_vars/{{item}}.yml"
  with_items: "{{basic_host_extra_group_vars}}"
  when: basic_host_extra_group_vars is defined

- name: merge local network nodes into global one
  set_fact:
    network_nodes: "{{ {} | combine(network_nodes, local_network_nodes, recursive=True) }}"
  when: local_network_nodes is defined

- name: merge local vlan definitions into global one
  set_fact:
    vlans: "{{ {} | combine(vlans, local_vlans, recursive=True) }}"
  when: local_vlans is defined

- name: merge local dhcp networks into global one
  set_fact:
    dhcp_networks: "{{ {} | combine(dhcp_networks, local_dhcp_networks, recursive=True) }}"
  when: local_dhcp_networks is defined

- name: set default password store
  set_fact:
    passdb: passwordstore
  when: passdb is undefined

- name: set default password length
  set_fact:
    passdb_password_length: 20
  when: passdb_password_length is undefined

- name: set default for password creation
  set_fact:
    passdb_password_create: True
  when: passdb_password_create is undefined

- name: set passdb extra arguments
  set_fact:
    passdb_extra_arg: " create={{passdb_password_create}} length={{passdb_password_length}}"

- include_tasks: default_vars.yml
  tags:
    - base_config
    - access_setup

- name: check default password store access
  set_fact:
    _passdb_check_value: "{{lookup(passdb, passdb_check_entry)}}"
  register: _passdb_result
  ignore_errors: True
  when: >
    passdb_check_entry is defined

# This is for backwards compatibility. This will fail during execution if
# password store is not available
- name: setting default password store availability to true without check
  set_fact:
    default_passdb_available: True
  when: _passdb_result is skipped

- name: setting default password store availability to true
  set_fact:
    default_passdb_available: True
  when: _passdb_result is succeeded

- debug: msg="Passdb is not available, some roles may fail"
  when: _passdb_result is failed

- name: include main tasks for non-Windows
  include_tasks: main_default.yml
  tags:
    - base_config
    - access_setup
  when: ansible_os_family != "Windows"

- name: include main tasks for windows
  include_tasks: main_windows.yml
  tags:
    - base_config
    - access_setup
  when: ansible_os_family == "Windows"

- name: include additional tasks
  include_tasks: "tasks/{{item}}.yml"
  with_items: "{{basic_host_extra_tasks}}"
  when: basic_host_extra_tasks is defined
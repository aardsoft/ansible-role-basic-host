- set_fact:
    is_wsl: True
  when: ansible_kernel is search("Microsoft")

- name: check provisioning marker
  stat:
    path: "/.provisioning-needed"
  register: marker

- name: configure root user password
  user:
    name: root
    password: "{{lookup(passdb, root_passdb_entry)|password_hash('sha512', 65534 | random(seed=inventory_hostname) | string)}}"
  when: >
    root_passdb_entry is defined and
    default_passdb_available == True

- name: set resolv location to site, if necessary
  tags:
    - base_config
    - access_setup
  set_fact:
    resolv_location: "{{ site_region }}"
  when: site_region is defined and resolv_location is undefined

- name: add resolv.conf
  tags:
    - base_config
  copy:
    src: resolv.conf.{{ resolv_location }}
    dest: /etc/resolv.conf
    owner: root
    group: root
    mode: 0644
  when: resolv_location is defined

- name: add resolv.conf (template)
  tags:
    - base_config
  template:
    src: resolv.conf.j2
    dest: /etc/resolv.conf
    owner: root
    group: root
    mode: 0644
  when: nameservers is defined

- name: add adjtime
  copy:
    src: adjtime
    dest: /etc/adjtime
    owner: root
    group: root
    mode: 0644
  tags:
    - base_config

- name: add hosts
  template:
    src: hosts.j2
    dest: /etc/hosts
    owner: root
    group: root
    mode: 0644
  tags:
    - base_config

- name: add environment
  template:
    src: environment.j2
    dest: /etc/environment
    owner: root
    group: root
    mode: 0644
  tags:
    - base_config

- name: add logind configuration
  template:
    src: logind.conf.j2
    dest: /etc/systemd/logind.conf
    owner: root
    group: root
    mode: 0644
  tags:
    - base_config
  notify:
    - restart logind
  when: ansible_service_mgr == 'systemd'

- name: add resolved configuration
  template:
    src: resolved.conf.j2
    dest: /etc/systemd/resolved.conf
    owner: root
    group: root
    mode: 0644
  tags:
    - base_config
# Don't restart for now - it's not much used yet
#  notify:
#    - restart resolved
  when: ansible_service_mgr == 'systemd'

- name: add journald configuration
  template:
    src: journald.conf.j2
    dest: /etc/systemd/journald.conf
    owner: root
    group: root
    mode: 0644
  tags:
    - base_config
  notify:
    - restart journald
  when: ansible_service_mgr == 'systemd'

- name: locate existing sshd host keys
  find:
    paths: /etc/ssh/
    patterns: "ssh_host_*_key"
    recurse: no
    file_type: file
  register: ssh_host_keys
  tags:
    - base_config

- name: add sshd configuration
  template:
    src: sshd_config.j2
    dest: /etc/ssh/sshd_config
    owner: root
    group: root
    mode: 0640
  tags:
    - base_config
  notify:
    - restart sshd

# timezone command was added in 2.2 only
- name: set /etc/timezone
  copy:
    content: "{{ host_timezone }}"
    dest: /etc/timezone
    mode: 0644
  tags:
    - base_config

- name: set /etc/localtime
  file:
    src: "/usr/share/zoneinfo/{{ host_timezone }}"
    dest: /etc/localtime
    state: link
    force: yes
  tags:
    - base_config

- stat: path=/etc/hostname
  register: hostname_file
  tags:
    - base_config

- name: set hostname
  copy:
    content: "{{ hostname }}"
    dest: /etc/hostname
  when: hostname.stat.exists == False and hostname is defined

- name: set hostname
  copy:
    content: "{{ inventory_hostname.split('.')[0] }}"
    dest: /etc/hostname
  when: hostname.stat.exists == False and hostname is undefined
  tags:
    - base_config

- include_tasks: debug_variables.yml
  when: debug_variables is defined and debug_variables == True
  tags:
    - base_config
    - access_setup

- include_tasks: "basic_host_{{ ansible_os_family }}.yml"
  when: ansible_os_family == "Debian" or ansible_os_family == "Suse" or ansible_os_family == "RedHat"
  tags:
    - base_config
    - access_setup

- name: create ssl cert group
  group: name=ssl-cert gid=950 state=present

- name: create certificate directory
  file:
    path: /etc/ssl/keys
    owner: root
    group: ssl-cert
    mode: 0750
    state: directory

- name: create and mount logical volumes
  include_tasks: logical_volume.yml
  with_dict: "{{logical_volumes}}"
  loop_control:
    loop_var: _volume
  when: logical_volumes is defined

- name: create directory for secret files
  file:
    path: "{{_secret.value.dest|dirname}}"
    owner: "{{_secret.value.owner|default('root')}}"
    group: "{{_secret.value.group|default('root')}}"
    mode: "{{_secret.value.dirmode}}"
    state: directory
  with_dict: "{{secret_files|default({})}}"
  loop_control:
    loop_var: _secret
  when: >
    default_passdb_available == True and
    _secret.value.dest is defined and
    _secret.value.key is defined and
    _secret.value.dirmode is defined and
    (_secret.value.state is undefined or
     (_secret.value.state is defined and _secret.value.state != "absent"))

# This supports a structure similar to:
#
# secret_files:
#   ceph_mirrors:
#     dest: /etc/ceph/frontend_mirrors.secret
#     key: ceph/frontend_mirrors
- name: add secret files
  template:
    src: secretfile.j2
    dest: "{{_secret.value.dest}}"
    owner: "{{_secret.value.owner|default('root')}}"
    group: "{{_secret.value.group|default('root')}}"
    mode: "{{_secret.value.mode|default(0400)}}"
  with_dict: "{{secret_files|default({})}}"
  loop_control:
    loop_var: _secret
  when: >
    default_passdb_available == True and
    _secret.value.dest is defined and
    _secret.value.key is defined and
    (_secret.value.state is undefined or
     (_secret.value.state is defined and _secret.value.state != "absent"))

#- name: Install python-selinux (Suse)
#  zypper:
#    name: "python-selinux"
#    state: present
#  when: ansible_os_family == "Suse"
#  tags:
#    - access_setup

# This is split off to allow easier includes from roles using delegates
- include: manage_adm_user.yml
  tags:
    - access_setup

- name: configure sysctl
  include: sysctl.yml
  loop_control:
    loop_var: _sysctl
  with_dict: "{{sysctl_keys|default({})}}"
  tags:
    - access_setup

- name: copy scripts
  copy:
    src: "{{item}}"
    dest: /usr/bin/{{item}}
    owner: root
    group: root
    mode: 0755
  with_items:
    - hp-spp-tool

- include: manage_network.yml
  tags:
    - access_setup

- name: add firewalld config file
  template:
    src: firewalld.conf.j2
    dest: /etc/firewalld/firewalld.conf
    owner: root
    group: root
    mode: 0600
  ignore_errors: True
  register: firewalld_config
  when: firewalld_required is defined and firewalld_required == True

- name: restart firewalld
  service: name=firewalld state=restarted
  ignore_errors: True
  when: >
    firewalld_required is defined and firewalld_required == True and
    firewalld_config is changed

- name: check if firewalld is available and working
  firewalld:
    zone: block
    state: enabled
    permanent: no
  register: firewalld_result
  ignore_errors: True

- name: register firewalld status
  set_fact:
    firewalld_available: True
  when: firewalld_result is succeeded

- name: setup firewalld
  include: firewalld_setup.yml
  when: >
    firewalld_available == False and
    firewalld_required is defined and firewalld_required == True

- name: create additional firewalld zones
  firewalld:
    zone: "{{__zone}}"
    state: present
    permanent: yes
  loop_control:
    loop_var: __zone
  with_items: "{{firewalld_zones}}"
  register: __zones_changed
  when: >
    firewalld_available == True and
    firewalld_zones is defined and
    (__zone.state is undefined or
    __zone.state == "present")

- debug: msg="{{__zones_changed}}"

- name: reload firewalld
  systemd:
    name: firewalld
    state: reloaded
  when: >
    __zones_changed is defined and
    __zones_changed is changed

- name: configure masquerading for zones
  firewalld:
    zone: "{{__zone}}"
    immediate: yes
    state: enabled
    permanent: yes
    masquerade: yes
  loop_control:
    loop_var: __zone
  with_items: "{{firewalld_masquerade_zones}}"
  when: >
    firewalld_available == True and
    firewalld_masquerade_zones is defined

- name: configure firewalld zones for networkd managed interfaces
  firewalld:
    zone: "{{ item.value.zone }}"
    interface: "{{ item.key }}"
    permanent: true
    state: enabled
    immediate: true
  with_dict: "{{network_nodes[inventory_hostname].networks |default({})}}"
  when: >
    firewalld_available == True and
    item.value.zone is defined
  tags:
    - access_setup

- name: configure firewalld rules
  include: firewalld_rules.yml
  with_dict: "{{firewalld_rules}}"
  when: >
    firewalld_available == True and firewalld_rules is defined

- name: copy selinux configuration
  template:
    src: selinux.config.j2
    dest: /etc/selinux/config
    owner: root
    group: root
    mode: 0644
  when: ansible_os_family == "RedHat"

# to generate te files, use audit2allow against audit.log
# as example: cat /var/log/audit/audit.log | audit2allow -m nginx > nginx.te
# or, in case there's already a module which should not be overriden, create
# using a different name:
# grep ctdb /var/log/audit/audit.log | audit2allow -M ctdb-ceph
- name: add custom selinux modules
  include: add_selinux_modules.yml
  with_dict: "{{selinux_te_files|default({})}}"
  when: >
    (item.value.state is undefined or
     (item.value.state is defined and item.value.state != "absent"))

- name: remove custom selinux modules
  command: "semodule -r {{item.key}}"
  with_dict: "{{selinux_te_files|default({})}}"
  when: >
    item.value.state is defined and item.value.state == "absent"

- name: drop root .ssh (provisioning)
  file:
    path: "/root/.ssh"
    state: absent
  when: marker.stat.exists == True

- name: drop provisioning marker
  file:
    path: "/.provisioning-needed"
    state: absent
  when: marker.stat.exists == True

- name: configure minimal ceph clients
  template:
    src: ceph-minimal.conf.j2
    dest: /etc/ceph/ceph.conf
    owner: root
    group: root
    mode: 0644
  when: >
    ceph_minimal is defined and
    ceph_minimal_client is defined and ceph_minimal_client == True

- name: configure rbd mapping
  include: rbd_mappings.yml
  when: rbd_mappings is defined

- name: configure mounts
  include: mounts.yml
  when: mounts is defined

# non-provisioning related steps should go here, if possible
- name: configure displaymanager
  template:
    src: displaymanager.j2
    dest: /etc/sysconfig/displaymanager
    owner: root
    group: root
    mode: 0644
  when: >
    displaymanager is defined and
    (displaymanager.state is undefined or
     displaymanager.state != "absent")

# TODO: allow reverting this
- name: set graphical target as default
  file:
    src: /usr/lib/systemd/system/graphical.target
    dest: /etc/systemd/system/default.target
    state: link
  when: >
    displaymanager is defined and
    (displaymanager.state is undefined or
     displaymanager.state != "absent")

- name: configure container registry
  include_tasks: containers.yml
  when: >
    use_podman is defined and
    use_podman == True

- name: create systemd timers
  include_tasks: systemd_timer.yml
  when: systemd_timers is defined

- name: manage users
  include_tasks: manage_users.yml
  tags:
    - base_config
    - access_setup
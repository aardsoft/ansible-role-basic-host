- set_fact:
    is_wsl: True
  when: ansible_kernel is search("Microsoft")

- name: check provisioning marker
  stat:
    path: "/.provisioning-needed"
  register: marker

- name: configure root user password
  user:
    name: root
    password: "{{lookup(passdb, root_passdb_entry)|password_hash('sha512', 65534 | random(seed=inventory_hostname) | string)}}"
  when: >
    root_passdb_entry is defined and
    default_passdb_available == True and
    ansible_os_family != "Darwin"

- ansible.builtin.include_role:
    name: data-utilities
    tasks_from: manage_nameservices
  tags:
    - base_config
    - access_setup

- name: add environment
  template:
    src: environment.j2
    dest: /etc/environment
    owner: root
    group: root
    mode: 0644
  when: ansible_os_family != "Darwin"
  tags:
    - base_config

- name: add logind configuration
  template:
    src: logind.conf.j2
    dest: /etc/systemd/logind.conf
    owner: root
    group: root
    mode: 0644
  tags:
    - base_config
  notify:
    - restart logind
  when: ansible_service_mgr == 'systemd'

- name: add journald configuration
  template:
    src: journald.conf.j2
    dest: /etc/systemd/journald.conf
    owner: root
    group: root
    mode: 0644
  tags:
    - base_config
  notify:
    - restart journald
  when: ansible_service_mgr == 'systemd'

- name: locate existing sshd host keys
  find:
    paths: /etc/ssh/
    patterns: "ssh_host_*_key"
    recurse: no
    file_type: file
  register: ssh_host_keys
  tags:
    - base_config

- name: try to locate sftp binary
  include_tasks: detect_sftp_binary.yml
  with_items:
    - /usr/libexec/openssh/sftp-server
    - /usr/lib/openssh/sftp-server
    - /usr/libexec/ssh/sftp-server
    - /usr/lib/ssh/sftp-server
    - /usr/libexec/sftp-server
  loop_control:
    loop_var: _sftp_path
  tags:
    - base_config
  when: >
    sshd.sftp_binary is undefined and
    detected_sftp_binary is undefined

- name: add sshd configuration
  template:
    src: sshd_config.j2
    dest: /etc/ssh/sshd_config
    owner: root
    group: "{{_root_group}}"
    mode: 0640
  tags:
    - base_config
  notify:
    - restart sshd

- name: add simple init (WSL)
  copy:
    src: wsl-simple-init
    dest: /usr/sbin/wsl-simple-init
    owner: root
    mode: 0755
  when: is_wsl == True

- ansible.builtin.include_role:
    name: data-utilities
    tasks_from: manage_time
  tags:
    - base_config

- ansible.builtin.include_role:
    name: data-utilities
    tasks_from: manage_hostname
  tags:
    - base_config

- include_tasks: debug_variables.yml
  when: debug_variables is defined and debug_variables == True
  tags:
    - base_config
    - access_setup

- ansible.builtin.include_role:
    name: data-utilities
    tasks_from: manage_motd
  tags:
    - base_config
  when: >
    ansible_os_family != "Darwin"

- name: include distribution specific tasks
  include_tasks: "basic_host_{{ ansible_os_family }}.yml"
  when: >
    ansible_os_family == "Debian" or
    ansible_os_family == "Suse" or
    ansible_os_family == "RedHat" or
    ansible_os_family == "Darwin"
  tags:
    - base_config
    - access_setup

- name: create ssl cert group
  group: name=ssl-cert gid=950 state=present

- name: create certificate directory
  file:
    path: /etc/ssl/keys
    owner: root
    group: ssl-cert
    mode: 0750
    state: directory

- name: configure udev rules
  include_tasks: udev.yml
  tags:
    - base_config
    - access_setup
  when: >
    removed_udev_rule_files is defined or
    udev_rule_files is defined

- name: create and mount volumes
  include_tasks: volume.yml
  with_dict: "{{volumes}}"
  loop_control:
    loop_var: _volume
  when: volumes is defined

- name: create and mount logical volumes
  include_tasks: logical_volume.yml
  with_dict: "{{logical_volumes}}"
  loop_control:
    loop_var: _volume
  when: logical_volumes is defined

- name: create directory for secret files
  file:
    path: "{{_secret.value.dest|dirname}}"
    owner: "{{_secret.value.owner|default('root')}}"
    group: "{{_secret.value.group|default('root')}}"
    mode: "{{_secret.value.dirmode}}"
    state: directory
  with_dict: "{{secret_files|default({})}}"
  loop_control:
    loop_var: _secret
  when: >
    default_passdb_available == True and
    _secret.value.dest is defined and
    _secret.value.key is defined and
    _secret.value.dirmode is defined and
    (_secret.value.state is undefined or
     (_secret.value.state is defined and _secret.value.state != "absent"))

# This supports a structure similar to:
#
# secret_files:
#   ceph_mirrors:
#     dest: /etc/ceph/frontend_mirrors.secret
#     key: ceph/frontend_mirrors
- name: add secret files
  template:
    src: secretfile.j2
    dest: "{{_secret.value.dest}}"
    owner: "{{_secret.value.owner|default('root')}}"
    group: "{{_secret.value.group|default('root')}}"
    mode: "{{_secret.value.mode|default('u=r,g=,o=')}}"
  with_dict: "{{secret_files|default({})}}"
  loop_control:
    loop_var: _secret
  when: >
    default_passdb_available == True and
    _secret.value.dest is defined and
    _secret.value.key is defined and
    (_secret.value.state is undefined or
     (_secret.value.state is defined and _secret.value.state != "absent"))

#- name: Install python-selinux (Suse)
#  zypper:
#    name: "python-selinux"
#    state: present
#  when: ansible_os_family == "Suse"
#  tags:
#    - access_setup

# This is split off to allow easier includes from roles using delegates
- include_tasks: manage_adm_user.yml
  tags:
    - access_setup

- name: create wheel group
  group:
    name: wheel
    state: present
    system: true
  when: >
    ansible_os_family != "Darwin"
  tags:
    - access_setup

- name: configure sysctl
  include_tasks: sysctl.yml
  loop_control:
    loop_var: _sysctl
  with_dict: "{{sysctl_keys|default({})}}"
  tags:
    - access_setup

- name: copy scripts
  copy:
    src: "{{script}}"
    dest: "{{local_bin}}/{{script}}"
    owner: root
    group: root
    mode: 0755
  loop_control:
    loop_var: script
  when: >
    ansible_os_family != "Darwin"
  with_items:
    - hp-spp-tool

- ansible.builtin.include_role:
    name: data-utilities
    tasks_from: manage_network

- ansible.builtin.include_role:
    name: data-utilities
    tasks_from: manage_firewall

- name: copy selinux configuration
  template:
    src: selinux.config.j2
    dest: /etc/selinux/config
    owner: root
    group: root
    mode: 0644
  when: ansible_os_family == "RedHat"

# to generate te files, use audit2allow against audit.log
# as example: cat /var/log/audit/audit.log | audit2allow -m nginx > nginx.te
# or, in case there's already a module which should not be overriden, create
# using a different name:
# grep ctdb /var/log/audit/audit.log | audit2allow -M ctdb-ceph
- name: add custom selinux modules
  include_tasks: add_selinux_modules.yml
  with_dict: "{{selinux_te_files|default({})}}"
  when: >
    (item.value.state is undefined or
     (item.value.state is defined and item.value.state != "absent"))

- name: remove custom selinux modules
  command: "semodule -r {{item.key}}"
  with_dict: "{{selinux_te_files|default({})}}"
  when: >
    item.value.state is defined and item.value.state == "absent"

- name: drop root .ssh (provisioning)
  file:
    path: "/root/.ssh"
    state: absent
  when: marker.stat.exists == True

- name: drop provisioning marker
  file:
    path: "/.provisioning-needed"
    state: absent
  when: marker.stat.exists == True

- name: configure minimal ceph clients
  template:
    src: ceph-minimal.conf.j2
    dest: /etc/ceph/ceph.conf
    owner: root
    group: root
    mode: 0644
  when: >
    ceph_minimal is defined and
    ceph_minimal_client is defined and ceph_minimal_client == True

- name: configure rbd mapping
  include_tasks: rbd_mappings.yml
  when: rbd_mappings is defined

- name: configure mounts
  include_tasks: mounts.yml
  when: mounts is defined

# non-provisioning related steps should go here, if possible
- name: configure displaymanager
  template:
    src: displaymanager.j2
    dest: /etc/sysconfig/displaymanager
    owner: root
    group: root
    mode: 0644
  when: >
    displaymanager is defined and
    (displaymanager.state is undefined or
     displaymanager.state != "absent")

# TODO: allow reverting this
- name: set graphical target as default
  file:
    src: /usr/lib/systemd/system/graphical.target
    dest: /etc/systemd/system/default.target
    state: link
  when: >
    displaymanager is defined and
    (displaymanager.state is undefined or
     displaymanager.state != "absent")

- name: configure profile.d files
  include_tasks: profile.yml
  tags:
    - base_config
    - access_setup
  when: >
    removed_profiled_files is defined or
    profiled_files is defined

- name: configure container registry
  include_tasks: containers.yml
  when: >
    use_podman is defined and
    use_podman == True

- name: create systemd timers
  include_tasks: systemd_timer.yml
  when: systemd_timers is defined

- name: create cleanup scripts
  include_tasks: cleanup_scripts.yml
  when: directory_cleanup is defined

- ansible.builtin.include_role:
    name: data-utilities
    tasks_from: manage_nbd_exports
  when: nbd_exports is defined

- ansible.builtin.include_role:
    name: data-utilities
    tasks_from: manage_nfs_exports
  when: nfs_exports is defined

- name: manage users
  include_tasks: manage_users.yml
  tags:
    - base_config
    - access_setup

- ansible.builtin.include_role:
    name: data-utilities
    tasks_from: configure_gpg_users
  when: gpg_users is defined

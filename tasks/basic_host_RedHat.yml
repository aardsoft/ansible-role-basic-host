# note: deletion of old certificates is currently not supported
- name: install additional CA certificates
  tags:
    - access_setup
  copy:
    src: "{{item}}"
    dest: "/etc/pki/ca-trust/source/anchors/{{item}}"
  with_items: "{{ca_certificates|default({})}}"

# this would be better tied to actually changing CA files, but handlers
# only run at the end, which would be too late here. Given that it returns
# very quickly it's not worth the effort to check for changes.
- name: refresh CA trust
  shell: /usr/bin/update-ca-trust
  tags:
    - access_setup

- name: configure dnf
  template:
    src: dnf.conf.j2
    dest: /etc/dnf/dnf.conf
    owner: root
    mode: 0755
  tags:
    - access_setup
  when: >
    proxy_host is defined and skip_proxy is undefined
    and ansible_pkg_mgr == "dnf"

- name: configure python-firewall package (default)
  set_fact:
    python_firewall_package: python-firewall

- name: configure python-firewall package (Fedora >= 29)
  set_fact:
    python_firewall_package: python3-firewall
  when:
    ansible_distribution == 'Fedora' and ansible_distribution_version >= 29

- name: set basic packages
  set_fact:
    bare_metal_packages:
      - lvm2
      - ntp
      - ipmitool
      - dmidecode
      - nmap
      - lm_sensors
      - lsof
      - hdparm
      - smartmontools
    base_packages:
      - bash-completion
      - bzip2
      - curl
      - ca-certificates
      - firewalld
      - iotop
      - iproute
      - jq
      - net-tools
      - procps-ng
      - psmisc
      - screen
      - strace
      - tzdata
      - usbutils
      - vim
      - wget
      - policycoreutils-python
      - "{{python_firewall_package}}"
  when: base_packages is undefined

- name: set unwanted packages
  set_fact:
    unwanted_packages:
      - chrony
  when: unwanted_packages is undefined

- name: expand package list for bare metal servers
  set_fact:
    base_packages: "{{ base_packages + bare_metal_packages }}"
  when: ansible_virtualization_role == "host"

- name: append extra packages
  set_fact:
    base_packages: "{{ base_packages + redhat_extra_packages }}"
  when: redhat_extra_packages is defined

- name: Get rid of unwanted packages (dnf)
  dnf:
    name: "{{ item }}"
    state: absent
  with_items: "{{unwanted_packages}}"
  when: ansible_pkg_mgr == "dnf"

- name: Get rid of unwanted packages (yum)
  yum:
    name: "{{ item }}"
    state: absent
  with_items: "{{unwanted_packages}}"
  when: ansible_pkg_mgr == "yum"

- name: Install base packages (dnf)
  dnf:
    name: "{{ item }}"
    state: present
  with_items: "{{base_packages}}"
  when: ansible_pkg_mgr == "dnf"

- name: Install base packages (yum)
  yum:
    name: "{{ item }}"
    state: present
  with_items: "{{base_packages}}"
  when: ansible_pkg_mgr == "yum"

- name: configure static network interfaces (NM)
  template:
    src: ifcfg.j2
    dest: "/etc/sysconfig/network-scripts/ifcfg-{{item.key}}"
  with_dict: "{{network_nodes[inventory_hostname].networks |default({})}}"
  when: >
    item.value.static is defined and item.value.static == True
    and network_manager is undefined or
    (network_manager is defined and network_manager == "networkmanager")
  tags:
    - access_setup

- name: disable NetworkManager
  service: name=NetworkManager enabled=no
  when: network_manager is defined and network_manager != "networkmanager"
  notify:
    - stop NetworkManager
  tags:
    - access_setup
  # NetworkManager may not be availeble on all images - it's probably safe to
  # ignore the error here as even a still running network manager won't
  # break networking in many cases
  ignore_errors: True

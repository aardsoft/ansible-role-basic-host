- name: copy cloud-init template
  template:
    src: cloud-init.yaml.j2
    dest: /etc/cloud/cloud.cfg.d/99-disable-network-config.cgf
    owner: root
    group: root
    mode: 0644
  when: cloud_init is defined
  tags:
    - access_setup

- name: create networkd configuration directory
  file:
    path: /etc/systemd/network
    owner: root
    group: root
    mode: 0755
    state: directory
  when: network_manager is defined and network_manager == "networkd"
  tags:
    - access_setup

- name: check networkd availability
  service_facts:
  tags:
    - access_setup

- name: install networkd (opensuse, {{distribution_version}})
  zypper:
    name: "systemd-network"
    state: present
  when: >
    ansible_os_family == "Suse" and
    ansible_facts.services["systemd-networkd.service"] is undefined
  tags:
    - access_setup

- set_fact:
    __networkd_links: []
    __networkd_netdevs: []
    __networkd_networks: []
    __wpa_supplicant_ifaces: []
    __netplan_cfg: []

# link files need a prefix to be evaluated before the 99-default.link
# ideally eventually all networkd configuration files should get migrated to
# this naming scheme
- name: configure network links (networkd)
  template:
    src: systemd-link.j2
    dest: "/etc/systemd/network/{{systemd.networkd_prefix|default(10)}}-{{item.key}}.link"
    mode: 0644
  with_dict: "{{network_nodes[inventory_hostname].networks |default({})}}"
  when: >
    network_manager is defined and network_manager == "networkd" and
    item.value.link_flags is defined and
    (item.value.manager is undefined or item.value.manager == "networkd") and
    item.key != "ilo"
  notify:
    - restart networkd
  tags:
    - access_setup

- name: track network configurations (netplan)
  set_fact:
    __netplan_cfg: "{{__netplan_cfg + ['51-'+iface.key+'.yaml']}}"
  with_dict: "{{network_nodes[inventory_hostname].networks |default({})}}"
  when: >
    network_manager is defined and network_manager == "netplan" and
    (iface.value.manager is undefined or iface.value.manager == "netplan") and
    iface.key != "ilo"
  loop_control:
    loop_var: iface

# this might need additional restrictions if netplan support gets extended
- name: configure network configurations (netplan)
  template:
    src: netplan.yaml.j2
    dest: "/etc/netplan/51-{{iface.key}}.yaml"
    mode: 0644
  with_dict: "{{network_nodes[inventory_hostname].networks |default({})}}"
  when: >
    network_manager is defined and network_manager == "netplan" and
    (iface.value.manager is undefined or iface.value.manager == "netplan") and
    iface.key != "ilo"
#  notify:
#    - restart networkd
  tags:
    - access_setup
  loop_control:
    loop_var: iface

- name: track network links (networkd)
  set_fact:
    __networkd_links: "{{__networkd_links + [item.key+'.link']}}"
  with_dict: "{{network_nodes[inventory_hostname].networks |default({})}}"
  when: >
    network_manager is defined and network_manager == "networkd" and
    item.value.link_flags is defined and
    (item.value.manager is undefined or item.value.manager == "networkd") and
    item.key != "ilo"

- name: configure virtual network devices (networkd)
  template:
    src: systemd-netdev.j2
    dest: "/etc/systemd/network/{{item.key}}.netdev"
    mode: 0644
  with_dict: "{{network_nodes[inventory_hostname].networks |default({})}}"
  when: >
    network_manager is defined and network_manager == "networkd" and
    item.value.type is defined and item.value.type != "phys" and
    (item.value.manager is undefined or item.value.manager == "networkd") and
    item.key != "ilo" and item.value.type != "veth"
  notify:
    - restart networkd
  tags:
    - access_setup

- name: track network devices (networkd)
  set_fact:
    __networkd_netdevs: "{{__networkd_netdevs +  [item.key+'.netdev']}}"
  with_dict: "{{network_nodes[inventory_hostname].networks |default({})}}"
  when: >
    network_manager is defined and network_manager == "networkd" and
    item.value.type is defined and item.value.type != "phys" and
    (item.value.manager is undefined or item.value.manager == "networkd") and
    item.key != "ilo" and item.value.type != "veth"

- name: configure static network interfaces (networkd)
  template:
   src: systemd-network.j2
   dest: "/etc/systemd/network/{{item.key}}.network"
   mode: 0644
  with_dict: "{{network_nodes[inventory_hostname].networks |default({})}}"
  when: >
    network_manager is defined and network_manager == "networkd" and
    (item.value.manager is undefined or item.value.manager == "networkd") and
    item.key != "ilo"
  notify:
    - restart networkd
  tags:
    - access_setup

- name: track network interfaces (networkd)
  set_fact:
    __networkd_networks: "{{__networkd_networks + [item.key+'.network']}}"
  with_dict: "{{network_nodes[inventory_hostname].networks |default({})}}"
  when: >
    network_manager is defined and network_manager == "networkd" and
    (item.value.manager is undefined or item.value.manager == "networkd") and
    item.key != "ilo"

- debug:
    msg:
      - "Expecting following device files:"
      - "{{__networkd_links}}"
      - "{{__networkd_netdevs}}"
      - "{{__networkd_networks}}"
  when: >
    network_manager is defined and network_manager == "networkd"

- debug:
    msg:
      - "Expecting following device files:"
      - "{{__netplan_cfg}}"
  when: >
    network_manager is defined and network_manager == "netplan"

- name: configure wpa supplicant
  debug:
    msg: "wpa interface {{__iface}}"
  with_dict: "{{network_nodes[inventory_hostname].networks |default({})}}"
  when: >
    network_manager is defined and network_manager == "networkd" and
    (__iface.value.manager is undefined or __iface.value.manager == "networkd") and
    __iface.key != "ilo" and
    __iface.value.wlan_passdb_entry is defined and
    default_passdb_available == True
  loop_control:
    loop_var: __iface
  tags:
    - access_setup

- name: collect wpa supplicant interfaces
  set_fact:
    __wpa_supplicant_ifaces: "{{__wpa_supplicant_ifaces + [__iface.key]}}"
  with_dict: "{{network_nodes[inventory_hostname].networks |default({})}}"
  when: >
    network_manager is defined and network_manager == "networkd" and
    (__iface.value.manager is undefined or __iface.value.manager == "networkd") and
    __iface.key != "ilo" and
    __iface.value.wlan_passdb_entry is defined and
    default_passdb_available == True
  loop_control:
    loop_var: __iface
  tags:
    - access_setup

- name: mask global wpa supplicant
  systemd:
    name: wpa_supplicant.service
    masked: yes
    state: stopped
    force: yes
  when: >
    network_manager is defined and network_manager == "networkd" and
    __wpa_supplicant_ifaces is defined and
    __wpa_supplicant_ifaces|count >= 1
  tags:
    - access_setup

- name: create wpa_supplicant configuration files
  template:
    src: wpa_supplicant.conf.j2
    dest: /etc/wpa_supplicant/wpa_supplicant.conf
    owner: root
    group: root
    mode: 0600
  when: >
    network_manager is defined and network_manager == "networkd" and
    __wpa_supplicant_ifaces is defined and
    __wpa_supplicant_ifaces|count >= 1
  notify:
    - restart wpa_supplicant
  tags:
    - access_setup

- name: locate netplan configuration files
  find:
    paths: /etc/netplan
    patterns: "*.yaml"
    recurse: no
    file_type: file
  register: __netplan_config_files
  when: >
    network_manager is defined and network_manager == "netplan"

- name: remove old netplan configuration files
  file:
    state: absent
    path: "{{ __file.path }}"
  loop_control:
    loop_var: __file
  with_items: "{{ __netplan_config_files.files|default({}) }}"
  when: >
    network_manager is defined and network_manager == "netplan" and
    __file.path|basename not in __netplan_cfg

- name: locate networkd link files
  find:
    paths: /etc/systemd/network
    patterns: "*.link"
    recurse: no
    file_type: file
  register: __networkd_link_files
  when: >
    network_manager is defined and network_manager == "networkd"

- name: locate networkd netdev files
  find:
    paths: /etc/systemd/network
    patterns: "*.netdev"
    recurse: no
    file_type: file
  register: __networkd_netdev_files
  when: >
    network_manager is defined and network_manager == "networkd"

- name: locate networkd network files
  find:
    paths: /etc/systemd/network
    patterns: "*.network"
    recurse: no
    file_type: file
  register: __networkd_network_files
  when: >
    network_manager is defined and network_manager == "networkd"

- name: remove old .link files
  file:
    state: absent
    path: "{{ __file.path }}"
  loop_control:
    loop_var: __file
  with_items: "{{ __networkd_link_files.files|default({}) }}"
  when: >
    network_manager is defined and network_manager == "networkd" and
    __file.path|basename not in __networkd_links

- name: remove old .netdev files
  file:
    state: absent
    path: "{{ __file.path }}"
  loop_control:
    loop_var: __file
  with_items: "{{ __networkd_netdev_files.files|default({}) }}"
  when: >
    network_manager is defined and network_manager == "networkd" and
    __file.path|basename not in __networkd_netdevs

- name: remove old .network files
  file:
    state: absent
    path: "{{ __file.path }}"
  loop_control:
    loop_var: __file
  with_items: "{{ __networkd_network_files.files|default({}) }}"
  when: >
    network_manager is defined and network_manager == "networkd" and
    __file.path|basename not in __networkd_networks

- name: enable networkd services
  systemd: name="{{item}}" enabled=yes force=yes
  with_items:
    - systemd-networkd
    - systemd-networkd-wait-online
  when: network_manager is defined and network_manager == "networkd"
  notify:
    - restart networkd
  tags:
    - access_setup

- name: disable network manager services
  service: name="{{item}}" enabled=no state=stopped
  with_items:
    - NetworkManager
    - NetworkManager-wait-online
  when: network_manager is defined and network_manager != "networkmanager"
  tags:
    - access_setup
  ignore_errors: True

- name: enable network manager services
  service: name="{{item}}" enabled=yes state=started
  with_items:
    - NetworkManager
    - NetworkManager-wait-online
  when: network_manager is defined and network_manager == "networkmanager"
  tags:
    - access_setup

- name: locate old ifcfg files
  find:
    paths: /etc/sysconfig/network-scripts/
    patterns: "ifcfg-e*"
    recurse: no
    file_type: file
  register: find_result
  when: >
    network_manager is defined and network_manager == "networkd"

- name: remove old ifcfg files
  file:
    state: absent
    path: "{{ item.path }}"
  with_items: "{{ find_result.files }}"
  when: >
    network_manager is defined and network_manager == "networkd"

- name: configure wireguard interfaces
  include: manage_wireguard.yml
  with_dict: "{{network_nodes[inventory_hostname].networks |default({})}}"
  loop_control:
    loop_var: _iface
  when: >
    _iface.value.manager is defined and _iface.value.manager == "wg" and
    wireguard is defined and wireguard[_iface.key] is defined
  tags:
    - access_setup

- name: configure deterministic v6 addresses for OS X
  sysctl:
    name: net.inet6.send.opmode
    state: present
    value: 0
    reload: no
    sysctl_set: yes
  when: >
    ansible_os_family == "Darwin"

# this seems to go mostly away, so relying on distributions no longer
# works. Only disable when explicitely required.
- name: remove bridge filtering keys on unsupported distributions
  sysctl:
    name: "{{ item }}"
    state: absent
    reload: yes
  with_items:
    - net.bridge.bridge-nf-call-ip6tables
    - net.bridge.bridge-nf-call-iptables
    - net.bridge.bridge-nf-call-arptables
  when: >
    bridge_filtering is undefined or bridge_filtering == false
  ignore_errors: True

# having this enabled randomly breaks connectivity over bridges
- name: disable filtering on bridges
  sysctl:
    name: "{{ item }}"
    value: 0
    sysctl_set: yes
    state: present
    reload: yes
  with_items:
    - net.bridge.bridge-nf-call-ip6tables
    - net.bridge.bridge-nf-call-iptables
    - net.bridge.bridge-nf-call-arptables
  when: >
    bridge_filtering is defined and bridge_filtering == true
- set_fact:
    windows_script_directory: 'c:\ci'
  when: windows_script_directory is undefined

# subdirectory made available in windows search path
- set_fact:
    windows_script_directory_bin: '{{windows_script_directory}}\bin'

- set_fact:
    windows_temp_directory: 'c:\temp'
  when: windows_temp_directory is undefined

# https://support.microsoft.com/en-us/help/942817/how-to-change-the-remote-uac-localaccounttokenfilterpolicy-registry-se
# Makes sure remote sessions of users in the admin group have admin privileges
- name: configure LocalAccountTokenFilterPolicy
  win_regedit:
    path: hklm:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\system
    name: LocalAccountTokenFilterPolicy
    data: 1
    type: dword

- name: set connection profiles to private
  win_command: "powershell.exe Set-NetConnectionProfile -NetworkCategory Private"
  register: wincmd_status
  changed_when: wincmd_status.rc != 0

- name: make sure winrm is running
  win_command: "winrm.cmd quickconfig -q"
  register: wincmd_status
  changed_when: wincmd_status.rc != 0

- name: configure winrm for delayed startup
  win_service:
    name: WinRM
    start_mode: delayed

- name: check program files folder path
  win_command: powershell.exe -Command "[environment]::getfolderpath('Programfiles')"
  register: wincmd_status
  changed_when: false

- name: register program files folder path ({{wincmd_status}})
  set_fact:
    program_files_path: "{{wincmd_status.stdout_lines[0]}}"

- name: make sure windows temp directory exists
  win_file:
    path: "{{windows_temp_directory}}"
    state: directory

- name: make sure windows script directory exists
  win_file:
    path: "{{windows_script_directory}}"
    state: directory

- name: make sure windows script directory bin exists
  win_file:
    path: "{{windows_script_directory_bin}}"
    state: directory

- name: make sure windows script bin directory is in path
  win_path:
    elements:
      - "{{windows_script_directory_bin}}"

- name: make sure management user never expires
  win_user:
    name: "{{ adm_user }}"
    password_never_expires: yes
    password_expired: no

# Unlike the Linux management user there might often be a need to use
# the Windows one for interactive logins. Additionally, logging in on
# Windows is not copy & paste friendly. It therefore makes sense to
# allow specifying a separate password for the Windows user. If
# undefined the default password will be used.
- name: configure management user password (Windows password)
  win_user:
    name: "{{ adm_user }}"
    password: "{{lookup(passdb, adm_passdb_entry_win)}}"
  when: adm_passdb_entry_win is defined

- name: configure management user password (Global password)
  win_user:
    name: "{{ adm_user }}"
    password: "{{lookup(passdb, adm_passdb_entry)}}"
  when: >
    adm_passdb_entry_win is undefined and
    adm_passdb_entry is defined

- name: set windows hardware clock to UTC
  win_regedit:
    path: HKLM:\SYSTEM\CurrentControlSet\Control\TimeZoneInformation
    name: RealTimeIsUniversal
    data: 1
    type: dword

# this needs a new login for SSH sessions, but seems to directly change
# for the desktop and running WSL instances. Given that usually we only set
# that at the very beginning, before anything else is up, it's probably fine
# not to force a reboot.
- name: set windows timezone
  win_timezone:
    timezone: "{{host_timezone_win}}"

- name: start windows time service, if necessary
  win_service:
    name: w32time
    start_mode: auto
    state: started
  when: >
    ntp_servers is defined and
    (windows_time is undefined or windows_time == "ntp")

- name: configure NTP servers
  win_command: w32tm /config /manualpeerlist:"{{ ntp_servers|join(' ') }}" /reliable:yes /update
  changed_when: false
  when: >
    ntp_servers is defined and
    (windows_time is undefined or windows_time == "ntp")

# TODO: ICMP should be enabled per default for Windows
#- name: configure ICMP in firewall

- name: configure windows hostname
  win_hostname:
    name: "{{inventory_hostname}}"
  register: hostname_status

# if a host or group has troubles coming up reliably
# set windows_post_reboot_delay either in group or host vars.
- name: reboot after hostname change
  win_reboot:
    reboot_timeout: 600
    post_reboot_delay: "{{windows_post_reboot_delay|default(0)}}"
  when: hostname_status.reboot_required

# this doesn't take proxies, .. into account
# the assumption is that there's a local, controlled mirror
# with all those archives
# the installers are still downloaded for uninstalls - some components
# need the original installer for a clean uninstall
- name: download windows installers
  win_get_url:
    url: "{{item.value.url}}"
    dest: "{{windows_temp_directory}}\\{{item.key}}"
  with_dict: "{{windows_installers|default({})}}"
  when: >
    (item.value.state is undefined or item.value.state == 'present') and
    item.value.url is defined

- name: remove windows installers
  with_dict: "{{windows_installers|default({})}}"
  win_package:
    product_id: "{{item.value.product_id}}"
    state: absent
  when: >
    (item.value.state is defined and item.value.state == 'absent') and
    item.value.product_id is defined and
    item.value.uninstall_arguments is undefined

- name: remove windows installers (custom arguments)
  with_dict: "{{windows_installers|default({})}}"
  win_package:
    product_id: "{{item.value.product_id}}"
    state: absent
    arguments: "{{item.value.uninstall_arguments}}"
    path: "{{item.value.path|default(windows_temp_directory)}}\\{{item.key}}"
  when: >
    (item.value.state is defined and item.value.state == 'absent') and
    item.value.product_id is defined and
    item.value.uninstall_arguments is defined

# To get the product ID, for
# - MSI: msiinfo suminfo <msi-file> (from wix/msitools); sometimes wrong
# - general: install the package on a temp system, open powershell,
#   cd HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall, and
#   check contents with ls
# - get-wmiobject Win32_Product | Format-Table IdentifyingNumber, Name, LocalPackage -AutoSize
- name: install windows installers
  with_dict: "{{windows_installers|default({})}}"
  win_package:
    product_id: "{{item.value.product_id}}"
    path: "{{item.value.path|default(windows_temp_directory)}}\\{{item.key}}"
    arguments: "{{item.value.arguments|default('')}}"
  when: >
    (item.value.state is undefined or item.value.state == 'present') and
    (item.value.url is defined or item.value.path is defined) and
    item.value.product_id is defined

- name: add extra windows paths
  with_dict: "{{windows_extra_paths|default({})}}"
  win_path:
    elements:
      - "{{ item.value.path }}"

# for whatever reason windows insists on broken store reference entries in
# some cases -> nuke those
- include_tasks: win_remove_applinks.yml
  with_dict: "{{windows_installers|default({})}}"
  when: >
    (item.value.state is undefined or item.value.state == 'present') and
    item.value.url is defined and item.value.product_id is defined and
    item.value.appdata_orphans is defined

- name: create local users (without password)
  win_user:
    account_disabled: "{{item.value.disabled|default('no')}}"
    name: "{{item.key}}"
    fullname: "{{item.value.fullname|default(item.key)}}"
    description: "{{item.value.comment|default('Created by ansible')}}"
    groups: "{{item.value.groups|default('')}}"
    state: "{{item.value.state|default('present')}}"
    password_expired: "{{item.value.password_expired|default('no')}}"
    password_never_expires: "{{item.value.password_never_expires|default('no')}}"
    user_cannot_change_password: "{{item.value.user_cannot_change_password|default('yes')}}"
  with_dict: "{{win_users}}"
  when: win_users is defined and item.value.passdb_entry is undefined

- name: create local users (with password)
  win_user:
    account_disabled: "{{item.value.disabled|default('no')}}"
    name: "{{item.key}}"
    fullname: "{{item.value.fullname|default(item.key)}}"
    description: "{{item.value.comment|default('Created by ansible')}}"
    groups: "{{item.value.groups|default('')}}"
    state: "{{item.value.state|default('present')}}"
    password: "{{lookup(passdb, item.value.passdb_entry)}}"
    password_expired: "{{item.value.password_expired|default('no')}}"
    password_never_expires: "{{item.value.password_never_expires|default('no')}}"
    user_cannot_change_password: "{{item.value.user_cannot_change_password|default('yes')}}"
  with_dict: "{{win_users}}"
  when: win_users is defined and item.value.passdb_entry is defined

- include_tasks: manage_wsl.yml
  when: wsl_distributions is defined

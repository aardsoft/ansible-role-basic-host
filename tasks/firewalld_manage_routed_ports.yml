# This is a bit messy as firewalld doesn't have an easy interface to handle
# FORWARD tables, and ansibles firewalld module doesn't handle direct rules
#
# In short, each zone has FWDI_zone and FWDO_zone tables for incoming/outgoing
# forwarded packets. To allow forwarding we need to prepend a rule to the FWDI
# table. Fortunately firewalld is smart enough to not add duplicate rules,
# _and_ logs if a rule is already exist/doesn't exist, which simplifies state
# handling here.

- name: enable firewalld routed port ({{rule.key}}) (permanent)
  command: >
    firewall-cmd --permanent --direct --add-rule ipv4 filter FWDI_{{entry[0]}} 1 -p {{entry[1]}} --dport {{entry[2]}} -j ACCEPT
  with_nested:
    - "{{ rule.value.zones|default([rule.value.zone]) }}"
    - "{{ rule.value.protocols|default(['tcp']) }}"
    - "{{ rule.value.ports|default([rule.value.port]) }}"
  loop_control:
    loop_var: entry
  when: >
    (rule.value.state is undefined or rule.value.state == 'enabled') and
    (rule.value.ports is defined or rule.value.port is defined) and
    (rule.value.zones is defined or rule.value.zone is defined)
  register: fcmd_status
  changed_when: "'ALREADY_ENABLED' not in fcmd_status.stderr"

- name: enable firewalld routed port ({{rule.key}}) (immediate)
  command: >
    firewall-cmd --direct --add-rule ipv4 filter FWDI_{{entry[0]}} 1 -p {{entry[1]}} --dport {{entry[2]}} -j ACCEPT
  with_nested:
    - "{{ rule.value.zones|default([rule.value.zone]) }}"
    - "{{ rule.value.protocols|default(['tcp']) }}"
    - "{{ rule.value.ports|default([rule.value.port]) }}"
  loop_control:
    loop_var: entry
  when: >
    (rule.value.state is undefined or rule.value.state == 'enabled') and
    (rule.value.ports is defined or rule.value.port is defined) and
    (rule.value.zones is defined or rule.value.zone is defined)
  register: fcmd_status
  changed_when: "'ALREADY_ENABLED' not in fcmd_status.stderr"

- name: disable firewalld routed port ({{rule.key}}) (permanent)
  command: >
    firewall-cmd --permanent --direct --remove-rule ipv4 filter FWDI_{{entry[0]}} 1 -p {{entry[1]}} --dport {{entry[2]}} -j ACCEPT
  with_nested:
    - "{{ rule.value.zones|default([rule.value.zone]) }}"
    - "{{ rule.value.protocols|default(['tcp']) }}"
    - "{{ rule.value.ports|default([rule.value.port]) }}"
  loop_control:
    loop_var: entry
  when: >
    (rule.value.state is defined and rule.value.state == 'disabled') and
    (rule.value.ports is defined or rule.value.port is defined) and
    (rule.value.zones is defined or rule.value.zone is defined)
  register: fcmd_status
  changed_when: "'NOT_ENABLED' not in fcmd_status.stderr"

- name: disable firewalld routed port ({{rule.key}}) (immediate)
  command: >
    firewall-cmd --direct --remove-rule ipv4 filter FWDI_{{entry[0]}} 1 -p {{entry[1]}} --dport {{entry[2]}} -j ACCEPT
  with_nested:
    - "{{ rule.value.zones|default([rule.value.zone]) }}"
    - "{{ rule.value.protocols|default(['tcp']) }}"
    - "{{ rule.value.ports|default([rule.value.port]) }}"
  loop_control:
    loop_var: entry
  when: >
    (rule.value.state is defined and rule.value.state == 'disabled') and
    (rule.value.ports is defined or rule.value.port is defined) and
    (rule.value.zones is defined or rule.value.zone is defined)
  register: fcmd_status
  changed_when: "'NOT_ENABLED' not in fcmd_status.stderr"
- name: create management group
  group: name={{ adm_group }} gid={{ adm_gid }} state=present
  tags:
    - access_setup
  when: adm_group is defined and adm_gid is defined

- set_fact:
    adm_home: "/home/{{ adm_user }}"
  when: >
    adm_home is undefined and
    ansible_os_family != "Darwin"
  tags:
    - access_setup

- set_fact:
    adm_home: "/Users/{{ adm_user }}"
  when: >
    adm_home is undefined and
    ansible_os_family == "Darwin"
  tags:
    - access_setup

- set_fact:
    adm_groups:
      - disk
  when: >
    adm_groups is undefined and
    ansible_os_family != "Darwin"
  tags:
    - access_setup

- set_fact:
    adm_groups:
      - admin
  when: >
    adm_groups is undefined and
    ansible_os_family == "Darwin"
  tags:
    - access_setup

- name: create management user
  user:
    name: "{{ adm_user }}"
    uid: "{{ adm_uid }}"
    group: "{{ adm_group }}"
    groups: "{{ adm_groups|default([]) }}"
    shell: /bin/bash
    append: yes
  tags:
    - access_setup
  when: adm_user is defined and adm_uid is defined and adm_group is defined

- name: make sure management .ssh exists
  file:
    path: "{{adm_home}}/.ssh"
    owner: "{{ adm_user }}"
    group: "{{ adm_group }}"
    mode: 0700
    state: directory
  tags:
    - access_setup
  when: adm_user is defined

# management user has a specialized template which also allows including
# just one big authorized_keys
- name: update management authorized_keys file
  template:
    src: authorized_key_template_management.j2
    dest: "{{adm_home}}/.ssh/authorized_keys"
    owner: "{{ adm_user }}"
    group: "{{ adm_group }}"
    mode: 0600
  tags:
    - access_setup
  when: adm_user is defined and adm_group is defined

- name: add management sudoers configuration
  template:
    src: adm-sudoers.j2
    dest: /etc/sudoers.d/ansible-access
    owner: root
    group: "{% if ansible_os_family == 'Darwin' %}wheel{% else %}root{% endif %}"
    mode: 0440
  tags:
    - access_setup
  when: adm_user is defined
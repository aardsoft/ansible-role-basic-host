# TODO: add update repo for non-oss?
# TODO: fix zypper.conf recommends

# note: deletion of old certificates is currently not supported
- name: install additional CA certificates
  tags:
    - access_setup
  copy:
    src: "{{item}}"
    dest: "/etc/pki/trust/anchors/"
  with_items: "{{ca_certificates|default({})}}"

# this would be better tied to actually changing CA files, but handlers
# only run at the end, which would be too late here. Given that it returns
# very quickly it's not worth the effort to check for changes.
# note: this fails if ca-certificates package is not yet installed
- name: refresh CA trust
  shell: /usr/sbin/update-ca-certificates
  tags:
    - access_setup
  ignore_errors: True
  changed_when: false

- name: run basic init steps
  include_tasks: Suse_basic_setup.yml
  tags:
    - access_setup

# extra packages are assumed to be not required for just providing access
# having access_setup tags here could lead to conflicts during lxc provisioning
# when using delegates, and the host delegated to doesn't have own packages
# defined
- name: expand package list for bare metal servers
  set_fact:
    base_packages: "{{ base_packages + bare_metal_packages }}"
  when: >
    ansible_virtualization_role == "host" or
    ansible_virtualization_role == "NA"
  tags:
    - access_setup

- name: append extra packages
  set_fact:
    base_packages: "{{ base_packages + suse_extra_packages }}"
  when: suse_extra_packages is defined

- name: set additional OBS repos
  zypper_repository:
    name: "{{ item }}"
    repo: "{{ obs_base }}/{{ item }}/{{ suse_long_release }}?ssl_verify={{repo_ssl_verify|default('yes')}}"
    state: present
    auto_import_keys: yes
    overwrite_multiple: yes
  with_items: "{{obs_repos|default({})}}"
  tags:
    - access_setup

- include_tasks: manage_extra_repositories.yml
  when: package_repositories is defined
  tags:
    - access_setup

# TODO: add support for extra keys:
#       - description
#       - gpgcheck
- name: add additional RPM repositories
  zypper_repository:
    name: "{{ _repository.key }}"
    repo: "{{ _repository.value.baseurl }}?ssl_verify={{repo_ssl_verify|default('yes')}}"
    priority: "{{_repository.value.priority|default(99)}}"
    state: present
    auto_import_keys: yes
    overwrite_multiple: yes
    disable_gpg_check: >
      {% if _repository.value.gpg_check|default(False) == False %}
      yes
      {% else %}
      no
      {% endif %}
  with_dict: "{{ rpm_repos }}"
  loop_control:
    loop_var: _repository
  when: rpm_repos is defined
  tags:
    - access_setup

- name: Upgrade the system
  zypper:
    name: '*'
    state: dist-upgrade
  when: >
    transactional_system|default(False) == False and
    (skip_updates is undefined or skip_updates == False) or
    (force_updates is defined and force_updates == True)

- debug:
    msg: "Installing packages for {{delegate_hostname|default(inventory_hostname)}}"
  when: >
    debug_delegates is defined

- debug:
    msg:
      - "Step 3:"
      - "{{hostvars[delegate_hostname].base_packages}}"
  when: >
    debug_delegates is defined and
    delegate_hostname is defined

- name: Install base packages
  include_role:
    name: data-utilities
    tasks_from: install_packages
  vars:
    role_packages: "{{ hostvars[delegate_hostname|default(inventory_hostname)].base_packages }}"
    update_repo_cache: true

# in case the first one failed due to missing package, and we got here
# without needing a certificate for a proxy, refresh without masking
# errors to be sure it works.
- name: refresh CA trust (again)
  shell: /usr/sbin/update-ca-certificates
  changed_when: false
  tags:
    - access_setup

- name: stop and mask Wicked services
  systemd:
    name: "{{item}}.service"
    masked: yes
    state: stopped
    force: yes
  when: network_manager is defined and network_manager != "wicked"
  with_items:
    - wicked
    - wickedd-auto4
    - wickedd-dhcp4
    - wickedd-dhcp6
    - wickedd-nanny
    - wickedd
  ignore_errors: True
  tags:
    - access_setup

- name: stop and mask getty services for LXC
  systemd:
    name: getty@tty{{item}}.service
    masked: yes
    state: stopped
    force: yes
  when: >
    ansible_virtualization_type is defined and
    ansible_virtualization_type == "lxc"
  with_sequence: start={{lxc_getty_mask_start|default(0)}}  end={{lxc_getty_mask_end|default(4)}}

- name: stop and mask container-getty services for LXC
  systemd:
    name: container-getty@{{item}}.service
    masked: yes
    state: stopped
    force: yes
  when: >
    ansible_virtualization_type is defined and
    ansible_virtualization_type == "lxc"
  with_sequence: start={{container_getty_mask_start|default(0)}}  end={{container_getty_mask_end|default(3)}}
